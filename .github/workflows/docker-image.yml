name: Docker Image CI

on: push
# on:
#   push:
#     branches: [ main ]
#     # Publish `v1.2.3` tags as releases.
#     tags:
#       - v*
#   pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: golanger

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2 # Ref: https://github.com/actions/setup-go
        with:
          go-version: '^1.16' # The Go version to download (if necessary) and use.
      - name: Run Go Unit Tests
        run:  go version && go test ./...

  deploy:
    # Ensure test job passes before pushing image.
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16' # The Go version to download (if necessary) and use.

      - name: Run build script
        run:  bash -c ./build.sh

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Log into registry
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{secrets.DOCKERHUB_PASSWORD}} # --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=${{secrets.DOCKERHUB_USERNAME}}/$IMAGE_NAME
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
